Java
- Programming language
- Platform independent
- Object Oriented
- Versions
  - Java 8 and 11 (Commonly used)
  - Java 9 and 10 are not commonly talked about
    - there are some versions in between introduced with no LTS
  - The next LTS version of Java was Java 17

- How a particular feature is added in Java?
  - We have something called as JCP
    - The community will create a JSR
  - Another process for introducing features in Java is called as JEP

- Setup
  - We need to have JDK installed on our system
    - Tools and utilities i need for developing and running java apps
    - We don't get an IDE along with JDK
      - Separately we need to install Eclipse/IntelliJ/Vs Code


- Environment
  - Java is compiled and interpreted language
  - A Java program is saved as a .java file
    - When compiled, bytecode is produced
      - Which is saved as a .class file

  - The compiler is part of JDK

  - To run our Java code, we need something called as JVM
    - JVM is part of JRE
    - JVM's as of now are finetuned keeping server side systems in mind

  - JRE is part of JDK

  - We looked as various tools which are shipped along with JDK, for ex:
    - jdb, jconsole, jshell, etc...
    - TODO: Explore more about these tools

- Java has a huge API/library with lot's of readymade functions
  - for ex: String is a library class
            System is a library class 
  - Libraries are organized in packages
  - java.lang is one of the package in java
  - java.util, java.time, java.sql, ...


Basics of Java
- Primitive datatypes
  for ex: i want to store a number
    int x = 10; //Java
    x: number = 10; //typescript
    var x = 10; //JavaScript
    //in the latest version of java, we can use JS style declaration:
    var x = 10;

  - there are few datatypes in java which require explicit type conversion:
    - float f = 99.99;//error
    - float f = 99.99F;
 
    - long l = 99999999999999; //error
    - long l = 99999999999999L;


    int x = 9_9999_99; //underscore symbol for logical separation

    //what if we want to store a number which is so huge that none of the datatypes will fit?
    - we'll have to use BigInteger and BigDecimal API to help us in such cases
      - TODO : check the usage of these API classes

 - String in Java is not a primitive type, why?
   - for primitive datatypes, memory and size is fixed
   - where in case of String, which is non primitive type (object) memory is allocated dynamically
     String str = "Majrul Ansari";


- Flow Control (if/else if/switch case)

- Loops and Iterations (for, while, do..while)  


- Object Oriented Programming

  - What is an Object?
    - An object is a representation/description of a thing (physical/logical) or an entity
    - Before we answer this question, let's assume that we call everything around us is an object
      - laptop, headphone, mobilephone, tv, ...

    - How do you describe an Object?
      - An object has 
        - state/data/attributes/properties/characteristics/features/...
        - behaviour/functionality


- TODO: Check more about OOAD

- In programming, an object is described using a class
  - a class is a template/prototype/skeleton for creating object


OO concepts
- Abstraction
  - a software representation/model of any real world entity
    ex:
    class Color {
      int r, g, b;
    }

    Color c = new Color(127, 127, 127); //gray colour
  
   -as soon as you create a class, you have achieved abstraction
   
   for ex, create a calculator in java for adding and subtraction number
   - class Calculator {
       
       void add(..) {

       }

       void sub(..) {

       }
     }
 
   another ex, we have do develop an employee management system (ems):
   - class Employee {
        int empno;
        String name;
        double salary;
     }

   there are 4 ways of achieving abstraction in java
   - class, interface, enum, annotations (@)

     enum DaysOfTheWeek {
        MON, TUE, WED, THU, FRI, SAT, SUN;
     }

     DaysOfTheWeek d = DaysOfTheWeek.SUN;

- Encapsulation
  - unit
  - as soon as you a create a class in java, you have achieved abstraction and encapsulation as well
   
- Inheritance
  - a way of creating relationship between classes
  - IS-A relationship between classes

    class Person {
       address;
    }

    class Employee extends Person {
      empno,name,salary;
    }

    class Manager extends Employee {
      commission;
    }


- There is one more way of creating relationship between classes
  - HAS-A relationship between classes
    - Association
      - one to one, one to many, many to one, many to many
    - TODO: Check what is Aggregation and Composition
            Whole/Part Relationship

     class Employee {
        String name;
        double salary;
        Project[] projects;
     }

     class Project {


     }

    class Vehicle {

    }

    class Car extends Vehicle { //is a
       Engine engine; //has a
    }

    class Engine {

    }
 
- Polymorphism
  - compile time/overloading/early binding
  - run time/overriding/late binding


Google maps is an abstract representation of the geographical regions

As a developer, you will first create an abstract version of the software
- then gradually with time you will fill the system with all the required features


for ex: i want to develop a banking app which the customers will use to:
open/close account, fund transfer, deposit, withdraw, ...


Packages in Java
- A package is way of grouping/organizing related java programs together
- It's just a folder which get's created
- Name of the package generally followings this pattern (com.companyname)


abstract keyword of java
- abstract keyword is used for methods whose signature will be present in the parent class
  and body of the method will be in the subclasses
- for a class to contain abstract methods, even the class has to be marked as abstract class
  - abstract classes cannot be instantiated directly
  
- static keyword
  - static keyword when used with variables declare in a class:
    - what happens is that there will be only one copy of that variable in the memory
  - what happens in case of static methods?
    - there is no difference in memory management of static and non static functions/methods
    - the only difference is in how you call it
 
 - final keyword
   - final can be used for variables, methods and class as well
     - final variables act like constant whose value cannot be modified once assigned
     - final methods cannot be overriden
       - opposite of abstract methods, which has to be overriden
       - wait() and notify() are final methods in java
     - final class cannot be inherited, you cannot extend a final class
       - String class is final class

 - we can combine static and final for declaring constant variables, for ex:
 
class Math {
  
  static final double PI = 3.14;
}       

class Product {

   static final String SITE_NAME = "Flipkart";
}
     
final class User {
   String username, password;
   
   void encrypt() {
   	//we are using some alg to encrypt the username and password
   }
   
   void decrypt() {
   	//we are using some alg to decrypt the username and password   
   }
}

class FakeUser extends User {

  void encrypt() {
   	
   }
   
   void decrypt() {
   	
   }
}   

User u = new User(); // i will replace this silently with:
User u = new FakeUser();
u.encrypt();
    
Thumb rule of Java
------------------
1.
  In some places, we need to create objects to access the required functionality:
  for ex:
     Scanner s = new Scanner(..);
     s.nextLine();
     
     Date d = new Date();

2.
  In some places, we don't need to create objects to access the required functionality:
  for ex:
    Math.sqrt(..);
    Integer.parseInt(..);

3.
  In some places, we need to create objects with someone's help to access the required functionality:
  for ex:
	LocalDate d = LocalDate.now();
	LocalDate d = LocalDate.of(2020, 6, 13);
	d.getDayOfWeek();
	
	String str = "Majrul";
	//we don't write: String str = new String("Majrul");


class Class {


}

class Object {

}


Interfaces in Java
-------------------
Scenario:
Google has introduced an OS called as Android for mobiles devices
- Google wants to create an API/library which any developer can use for developing Android apps
- Google will create a contract/specification which developers can use in their code
  
  interface MobileApp {
    
    //this method will be called when the user launches the app
    void start();

    //this method will be called when the user switches to a different app
    void pause();

    //this method will be called when the user closes the app
    void stop();

  }

Dev 1 (I want to develop a game)

class CarRacingGame extends OpenGL implements MobileApp {

}

Dev 2 (I want to develop a banking app)

class BankingApp implements MobileApp {


}

TODO:
Check what are the differences between class and interface


Lambda expressions
------------------
- anonymous functions
- it allows us to pass functions as arguments
- till java 7, we can only pass primitive datatypes or objects as arguments to methods
  - this concept is part of functional programming technique
  - there is one more programming paradigm called as reactive programming
  - the merger of the above is called as functional reactive programming (FRP)
  - Java supports FRP techniques
   
like in OOP, object is the central concept
in FP, function is the first class citizen

- JavaScript
  function() {
  
  }
  
  () => {
  
  }
  
  setInterval(hello, 1000);
  function hello() {
  
  }
  
  setInterval(function() {
  
  }, 1000);
  
  setInterval(() => {
  
  }, 1000);
  
  
In Java, pre-req for lambda:
- anonymous inner classes
  class {
  
  }
  
- inner classes
  class A {
  	
  	class B {
  	
  	}
  }
  
- inner classes are used for writing classes which are not reusable
- anonymous inner classes needs a parent class/interface to inherit from


Exception Handling
------------------
Exception
- Error which may occur during the execution of a program

- As a developer we should aim to write code in which exceptions will be rare
  - On the contrary, Java in many places forces developer to write try..catch block in the code
    even if no error is going to occur

Exception Handling
- Writing code which will execute when some error occurs

java.lang.Exception class is the parent of all exceptions in Java

Object
- Throwable
  - There are two subclasses derived from Throwable class (Exception & Error)
    - We should not use Error and it's subclasses
      - It's meant for reporting low level errors
    - Exception and it's subclasses
      - It's meant for reporting application level errors
  - Exception
    - There are 2 types of exceptions, checked and unchecked
      checked
      - compiler checks whether the exception has been handled or not
      - Exception class and it's subclasses are checked in nature
        ex: IOException, FileNotFoundException, SQLException, etc...
      unchecked
      - compiler ignores whether the exception has been handled or not
      - from Exception class, a special subclass by the name RuntimeException is derived
        - RuntimeException and it's subclasses are unchecked in nature
        - ex: NullPointerException, ArrayIndexOutOfBoundsException, ...
        
TODO:
- Exception chaining
- How to programatically investigate the stack trace


Collections
-----------
- One of the most commonly used collection in an array
  - array is a set of more than one element of same type
    - int[] arr = new int[5];
      arr[0] = 100;
      arr[1] = 200;
      ...

  - in Javascript,
      var arr = new Array();
      var arr[] = [];
      arr[0] = 100; OR arr.push(100);
      
      int[] arr = {10, 20, 30, 40, 50};
      
      there are some issues with arrays in java because of which we don't use them regularly
      - arrays cannot be resized
        - arrays are fixed length in nature
        - arrays cannot be expanded/shrinked dynamically at the runtime

- Java provides alternatives to array in the form of Collection API (Data Structures)
- List, Set and Map are the 3 commonly used collection types
- Collections are dynamic(growable/shrinkable) in nature, there is no size limit like arrays
- Like in real life we use different types of collections, same is the case with programming

- List
  - allows duplicate elements
  - each element has an index associated with it (just like arrays)
    - that means i can read elements of the list randomly
  - the order of the elements does not change
    - i.e the order in which we add the elements, when we read it back it will be the same
  - ArrayList, LinkedList are few implementations of List in Java
    
- Set
  - doesn't allows duplicate elements
  - there is no index associated with the elements of it
    - to reach a particular element, we need to traverse/iterate the whole set
  - the order of the elements may change
    - i.e the order in which we add the elements, when we read it back it will not be the same
  - HashSet, LinkedHashSet are few implementations of Set in Java

- Map
  - Also called as Dictionary in other languages
  - Used for storing data in pairs (key & value)
    - ex: empno is the key, employee details is the value   
  - key has to be unique, value can be duplicate
  - HashMap, LinkedHashMap are few implementations of Map in Java

  
Stream API
----------
- API which is used for data processing
- It's like an Iterator but with more features
  
Various functional interfaces used by Stream API
- Function
  - function which takes an input, and has a return type
- Consumer
  - function which takes an input, but no return type
- Supplier
  - function with no input, but has a return type
- Predicate
  - function with some input, and boolean as return value
- TODO:
  - Check some more functional interfaces from java.util.function package
  


Multithreading
---------------
- WE may not get a change to develop a multithreaded app from scratch
  - Since most java applications are going to run on servers which are already providing multithreaded environment
- But every developer needs to focus on one thing, and that is:
  - Concurrency issues

- The requirement is to execute more than one task (Multi Tasking) at the same time
  - To achieve this, there are 2 options:
    - Multi Processing
    - Multi Threading (sub processes / process inside a process)
    
 
 - There are 2 types of Threads we can create in Java
   - Daemon and Non-Daemon
   - By default Threads are non-daemon in nature
     - JVM will not terminate as long as non-daemon threads are running
     
- Scenario: Suppose you have issued print command to print a word document of 100 pages
            So far 10 pages have got printed, 90 left
            Then we issue shutdown command
  - What will happen?
    - Will windows wait for the printer to print the remaining 90 pages and then only shutdown?
      - IF windows waits for the printer to finish the printing, then that means the printing process is non daemon
      - IF windows doesn't waits for the printer to finish the printing, then that means the printing process is daemon
   
- synchronization
  - synchronization issue will arise when more than one thread is trying to perform some operation on same instance
    - synchronized keyword will help us by allowing only one thread at a time to execute the respective operation
      - this is also called as locking (mutex)
  - there are other types of locking as well
    - semaphore, latch, barrier, ...
    
    
In Java we have wrapper classes for datatypes,
- for ex: for int datatype, we have Integer wrapper class

- TODO: check what is the role of AtomicInteger then?
        How can we schedule the execution of any task? for ex: i want the task to execute at 11.59 pm in the night
    

Project Loom
- Introduces support for virtual threads in Java
  - It's also called as Fibers in other languages
  
    